plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

version = "${minecraft_version}-${mod_version}"
archivesBaseName = "${mod_id}-forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: "stable", version: "39-1.12"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods { "${project.name}" { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods { "${project.name}" { source sourceSets.main } }
        }
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: '1.12.2-14.23.5.2860'
    implementation("net.minecraftforge:mergetool:0.2.3.3") { force = true }
}

jar {
    from rootProject.file('LICENSE')
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Implementation-Title'    : project.name,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
        ])
    }
}

jar.finalizedBy('reobfJar')
legacy {
    fixClasspath = true
}

processResources {
    def expandProps = [
            "version"          : "${minecraft_version}-${mod_version}",
            "minecraft_version": minecraft_version,
            "java_version"     : java_version
    ]

    filesMatching(['mcmod.info']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}

fancyGradle {
    patches {
        resources
        coremods
//		codeChickenLib
        asm
        mergetool
    }
}

// include resources during runtime
sourceSets.all {
    it.output.resourcesDir = it.output.classesDirs.getFiles().iterator().next()
}
